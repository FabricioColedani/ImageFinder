
# ImageFinder: Sistema bÃ¡sico de bÃºsqueda de imÃ¡genes por texto

Este proyecto incluye:
- Una base de datos SQLite para almacenar imÃ¡genes con texto asociado.
- Un backend en Flask con endpoints para subir, buscar y ver imÃ¡genes.
- Un frontend HTML mÃ­nimo para probar la bÃºsqueda.

---

## ðŸ“¦ Estructura de Carpetas

```
imagefinder/
â”œâ”€â”€ app.py
â”œâ”€â”€ database.db
â”œâ”€â”€ static/
â”‚   â””â”€â”€ uploads/
â”œâ”€â”€ templates/
â”‚   â””â”€â”€ index.html
â””â”€â”€ models.py
```

---

## ðŸ›  Requisitos

```bash
pip install flask sqlalchemy
```

---

## ðŸ—ƒ models.py (Base de Datos)

```python
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Image(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    filename = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=False)
    tags = db.Column(db.String(200), nullable=False)
```

---

## ðŸš€ app.py (Backend)

```python
from flask import Flask, request, render_template, send_from_directory
from flask_sqlalchemy import SQLAlchemy
import os

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
app.config['UPLOAD_FOLDER'] = 'static/uploads'
db = SQLAlchemy(app)

class Image(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    filename = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=False)
    tags = db.Column(db.String(200), nullable=False)

@app.before_first_request
def create_tables():
    db.create_all()

@app.route('/')
def index():
    query = request.args.get('q')
    if query:
        images = Image.query.filter(
            (Image.description.contains(query)) |
            (Image.tags.contains(query))
        ).all()
    else:
        images = []
    return render_template('index.html', images=images, query=query)

@app.route('/upload', methods=['POST'])
def upload():
    file = request.files['image']
    description = request.form['description']
    tags = request.form['tags']
    filename = file.filename
    file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
    new_image = Image(filename=filename, description=description, tags=tags)
    db.session.add(new_image)
    db.session.commit()
    return 'Imagen subida exitosamente'

if __name__ == '__main__':
    app.run(debug=True)
```

---

## ðŸ–¼ templates/index.html (Frontend)

```html
<!DOCTYPE html>
<html>
<head>
    <title>ImageFinder</title>
</head>
<body>
    <h1>Buscar ImÃ¡genes</h1>
    <form method="get" action="/">
        <input type="text" name="q" placeholder="Buscar...">
        <button type="submit">Buscar</button>
    </form>
    <div>
        {% for img in images %}
            <div>
                <img src="{{ url_for('static', filename='uploads/' + img.filename) }}" width="200"><br>
                <small>{{ img.description }} - {{ img.tags }}</small>
            </div>
        {% endfor %}
    </div>
</body>
</html>
```

---

